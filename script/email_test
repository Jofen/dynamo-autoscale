#!/usr/bin/env ruby

require_relative '../config/environment/common'
include DynamoAutoscale

table = TableTracker.new("fake_table")

rulepool = RuleSet.new do
  reads  last: 2, greater_than: "90%", scale: { on: :consumed, by: 1.7 }
  reads  last: 2, greater_than: "80%", scale: { on: :consumed, by: 1.5 }

  writes last: 2, greater_than: "90%", scale: { on: :consumed, by: 1.7 }
  writes last: 2, greater_than: "80%", scale: { on: :consumed, by: 1.5 }

  reads  for:  2.hours, less_than: "20%", min: 10, scale: { on: :consumed, by: 1.8 }
  reads  for:  2.hours, less_than: "30%", min: 10, scale: { on: :consumed, by: 1.8 }

  writes for:  2.hours, less_than: "20%", min: 10, scale: { on: :consumed, by: 1.8 }
  writes for:  2.hours, less_than: "30%", min: 10, scale: { on: :consumed, by: 1.8 }
end.rules.values.flatten

20.times do
  table.tick(rand(1..100).minutes.ago, {
    :provisioned_reads  => rand(1..1000),
    :provisioned_writes => rand(1..1000),
    :consumed_reads     => rand(1..1000),
    :consumed_writes    => rand(1..1000),
  })
end

10.times do
  table.triggered_rules[rand(1..100).minutes.ago] = rulepool[rand(rulepool.length)]
end

10.times do
  table.scale_events[rand(1..100).minutes.ago] = {
    reads_from:  rand(1..1000),
    reads_to:    rand(1..1000),
    writes_from: rand(1..1000),
    writes_to:   rand(1..1000),
  }
end

report = ScaleReport.new(table)

if ARGV[0]
  DynamoAutoscale.setup_from_config(ARGV[0], dry_run: false)

  report.send
elsif ARGV[0].nil?
  puts "Subject: #{report.email_subject}"
  puts
  puts report.email_content
elsif ARGV[0] and !File.exists?(ARGV[0])
  STDERR.puts "Usage: script/email_test [path/to/config.yml]"
  STDERR.puts "Error: The path you specified is to a file that does not exist."

  exit 1
end
