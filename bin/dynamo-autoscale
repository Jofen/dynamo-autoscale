#!/usr/bin/env ruby

require 'pp'
require 'optparse'

# Force this script into production mode as it's the only thing that will
# actually hit DynamoDB in the entire project.
ENV['RACK_ENV'] = "production"

actioner_opts = {}
general_opts  = {}

OptionParser.new do |opts|
  opts.banner = "Usage: dynamo-autoscale ruleset_path table_name [more table names] [options]"

  doc = 'Makes read and write downscales happen at the same time to save ' +
    'downscales per day.'

  opts.on('-g', '--group-downscales', doc) do
    actioner_opts[:group_downscales] = true
  end

  doc = 'Only works in conjunction with --group-downscales. Sets a maximum ' +
    'amount of time for an operation to be pending before it gets applied to Dynamo'

  opts.on('--flush-after SECONDS', Integer, doc) do |seconds|
    actioner_opts[:flush_after] = seconds.to_i.seconds
  end

  doc = 'Stops dynamo-autoscale from talking to DynamoDB. Instead, it just ' +
    'tracks the changes it would have made locally.'

  opts.on('--dry-run', doc) do
    general_opts[:dry_run] = true
  end

  doc = "Sets a minimum value for throughputs to be set to. " +
    "Defaults to 10."

  opts.on('--minimum-throughput VALUE', Float, doc) do |value|
    if value < 1.0
      STDERR.puts "Cannot set minimum throughput to less than 1."
      exit 1
    end

    general_opts[:minimum_throughput] = value
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end.parse!

ruleset = ARGV.shift
tables  = ARGV

if tables.empty? or ruleset.nil?
  STDERR.puts "Usage: dynamo-autoscale ruleset table_name [another_table_name ... ]"
  exit 1
end

if actioner_opts[:flush_after] and actioner_opts[:group_downscales].nil?
  STDERR.puts "Cannot specify a flush_after value with setting --group-downscales."
  exit 1
end

require_relative '../config/environment/common'
include DynamoAutoscale
extend  DynamoAutoscale

dynamo = AWS::DynamoDB.new
tables.select! do |table_name|
  if dynamo.tables[table_name].exists?
    true
  else
    logger.error "Table #{table_name} does not exist inside your DynamoDB."
    false
  end
end

if tables.empty?
  STDERR.puts "No valid tables specified."
  exit 1
end

DynamoAutoscale.rules          = RuleSet.new(ruleset)
DynamoAutoscale.dispatcher     = Dispatcher.new
DynamoAutoscale.poller         = CWPoller.new(tables: tables)
DynamoAutoscale.actioner_class = general_opts[:dry_run] ? LocalActioner : DynamoActioner
DynamoAutoscale.actioner_opts  = actioner_opts

if general_opts[:minimum_throughput]
  Actioner.minimum_throughput = general_opts[:minimum_throughput]
end

Signal.trap("USR1") do
  logger.info "[signal] Caught SIGUSR1. Dumping CSV for all tables in #{Dir.pwd}"

  DynamoAutoscale.tables.each do |name, table|
    table.to_csv! path: File.join(Dir.pwd, "#{table.name}.csv")
  end
end

Signal.trap("USR2") do
  logger.info "[signal] Caught SIGUSR2. Dumping graphs for all tables in #{Dir.pwd}"

  DynamoAutoscale.tables.each do |name, table|
    table.graph! path: File.join(Dir.pwd, "#{table.name}.png")
  end
end

DynamoAutoscale.poller.run
